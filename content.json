[{"title":"ssh无密码登录","date":"2018-01-25T16:36:10.000Z","path":"2018/01/26/ssh无密码登录/","text":"ssh 无密码登录要使用公钥与私钥。linux下可以用用ssh-keygen生成公钥/私钥对，下面我以CentOS为例。 有机器A(本机)，B(192.168.2.209)。现想A通过ssh免密码登录到B。 在A机下生成公钥/私钥对。 1ssh-keygen -t rsa -P &apos;&apos; 直接ssh-keygen然后三次回车就可以了。-P表示密码，-P ‘’ 就表示空密码，也可以不用-P参数，这样就要三车回车，用-P就一次回车。它在/home/用户下生成.ssh目录，.ssh下有id_rsa和id_rsa.pub。 把A机下的id_rsa.pub复制到B机下，在B机的.ssh/authorized_keys文件里 用scp复制。（如果B机器没有.ssh和authorized_keys文件则先创建这个文件夹和文件）1scp ~/.ssh/id_rsa.pub [用户名]@[IP]:/home/[用户名]/id_rsa.pub id_rsa.pub 100% 223 0.2KB/s 00:00 由于还没有免密码登录的，所以要输入密码。 B机把从A机复制的id_rsa.pub添加到.ssh/authorzied_keys文件里。 1234cat id_rsa.pub &gt;&gt; .ssh/authorized_keyschmod 755 ~chmod 700 ~/.sshchmod 600 ~/.ssh/authorized_keys authorized_keys的权限要是600。 无视2、3步，一步到位 1ssh-copy-id -i ~/.ssh/id_rsa.pub [用户名]@[IP] mac安装 ssh-copy-id 1curl -L https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh | sh 由于直接ssh [IP]不指定用户名，则会默认使用本机的用户名，为了使用固定用户名则采用以下方式 12cd ~/.sshvi config 键入以下格式内容123456Host [别名] HostName [IP] User [用户名]Host [别名] HostName [IP] User [用户名] 输入完成如下123456Host dev HostName 192.168.2.209 User rootHost test HostName 192.168.2.225 User root 至此直接输入如下命令即可通过固定用户名免密码连接对应服务器 1ssh dev","tags":[]},{"title":"supervisor进程守护","date":"2018-01-25T16:36:10.000Z","path":"2018/01/26/supervisor进程守护/","text":"1、安装与启动 yum 安装 1yum install supervisor easy_install 安装123wget --no-check-certificate https://bootstrap.pypa.io/ez_setup.py -O - | sudo pythoneasy_install supervisor 配置supervisor 在etc下创建目录，并赋权限 1mkdir -m 700 -p /etc/supervisor 在目录“ /etc/supervisor”下创建配置文件 1echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf 修改配置文件 1vi /etc/supervisor/supervisord.conf 在文件末尾添加，注意首尾需无空格，需顶格 12[include]files = /root/supervisorConf/*.conf 在目录“/etc/supervisor”下创建dotnet core 进程配置文件存放目录“conf.d” 1mkdir -m 700 /root/supervisorConf 如果需要在web控制台管理,则找到以下代码 1234;[inet_http_server] ; inet (TCP) server disabled by default;port=127.0.0.1:9001 ; (ip_address:port specifier, *:port for all iface);username=user ; (default is no username (open server));password=123 ; (default is no password (open server)) 修改代码，删除前面的分号，port改为*:90011234[inet_http_server] ; inet (TCP) server disabled by defaultport=*:9001 ; ip_address:port specifier, *:port for all ifausername=user ; default is no username (open server)password=123 ; default is no password (open server) 配置supervisor自动启动centos6设定supervisor启动文件 1vi /etc/init.d/supervisord 粘贴以下内容123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#! /usr/bin/env bash# chkconfig: - 85 15PATH=/sbin:/bin:/usr/sbin:/usr/binPROGNAME=supervisordDAEMON=/usr/bin/$PROGNAMECONFIG=/etc/supervisor/$PROGNAME.confPIDFILE=/tmp/$PROGNAME.pidDESC=&quot;supervisord daemon&quot;SCRIPTNAME=/etc/init.d/$PROGNAME# Gracefully exit if the package has been removed.test -x $DAEMON || exit 0start()&#123;echo -n &quot;Starting $DESC: $PROGNAME&quot;$DAEMON -c $CONFIGecho &quot;.............start success&quot;&#125;stop()&#123;echo &quot;Stopping $DESC: $PROGNAME&quot;if [ -f &quot;$PIDFILE&quot; ];thensupervisor_pid=$(cat $PIDFILE)kill -15 $supervisor_pidecho &quot;......&quot;echo &quot;stop success&quot;elseecho &quot;$DESC: $PROGNAME is not Runing&quot;echo &quot;.........................stop sucess&quot;fi&#125;status()&#123; statusport=`netstat -lntp|grep 9001|awk -F &apos; &apos; &apos;&#123;print $4&#125;&apos;|awk -F &apos;:&apos; &apos;&#123;print $2&#125;&apos;`if [ -f &quot;$PIDFILE&quot; ];thensupervisor_pid=$(cat $PIDFILE)echo &quot;$DESC: $PROGNAME is Runing pid=$supervisor_pid&quot;elseecho &quot;$DESC: $PROGNAME is not Runing&quot;echo &quot;please use command /etc/init.d/supervisord start Run the service&quot;fi&#125;case &quot;$1&quot; instart)start;;stop)stop;;restart)stopstart;;status)status;;*)echo &quot;Usage: $SCRIPTNAME &#123;start|stop|restart&#125;&quot; &gt;&amp;2exit 1;;esacexit 0 添加自启动服务 1chkconfig supervisord on 启动服务 1service supervisord start 停止服务 1service supervisord stop centos7创建supervisor 自启动服务 1vi /etc/systemd/system/supervisor.service 编辑内容： 1234567891011121314[Unit]Description=supervisor[Service]Type=forkingExecStart=/usr/bin/supervisord -c /etc/supervisor/supervisord.confExecStop=/usr/bin/supervisorctl shutdownExecReload=/usr/bin/supervisorctl reloadKillMode=processRestart=on-failureRestartSec=42s[Install]WantedBy=multi-user.target 使配置生效 1systemctl daemon-reload 设置服务开机启动，即设置enable 1systemctl enable supervisor.service 启动服务 1systemctl start supervisor.service 2、参考配置 /etc/supervisor/supervisord.conf 在文件最后添加 12[include]files = /root/supervisorConf/*.conf /etc/supervisor/mongo.conf 1234567891011[program:mongo]command=/home/mongodb/mongodb-linux/bin/mongod --dbpath /home/mongodb/mongodb-linux/datastderr_logfile=/var/log/mongo.error.logstdout_logfile=/var/log/mongo.stdout.logenvironment=ASPNETCORE_ENVIRONMENT=Productionuser=rootstopsignal=INTautostart=trueautorestart=trueredirect_stderr=truestartsecs=3 /etc/supervisor/mysql.conf 1234567891011[program:mysql]command=/usr/local/mysql/bin/mysqld_safe --defaults-file=/mysql/3306/my.cnfstderr_logfile=/var/log/mongo.error.logstdout_logfile=/var/log/mongo.stdout.logenvironment=ASPNETCORE_ENVIRONMENT=Productionuser=rootstopsignal=INTautostart=trueautorestart=trueredirect_stderr=truestartsecs=3 supervisor 监控的进程必须以非daemon 方式运行如Nginx要用supervisor 管理需要在配置文件增加一行 /opt/nginx/conf/nginx.conf 1daemon off; /etc/supervisor/nginx.conf 123456789101112[program:nginx]command=/usr/local/nginx/sbin/nginxdirectory=/usr/local/nginxstderr_logfile=/var/log/nginx.error.logstdout_logfile=/var/log/nginx.stdout.logenvironment=ASPNETCORE_ENVIRONMENT=Productionuser=rootstopsignal=INTautostart=trueautorestart=trueredirect_stderr=truestartsecs=3 /etc/supervisor/redis.conf 1234567891011[program:redis]command=/usr/local/bin/redis-server /opt/redis/redis.confstderr_logfile=/var/log/Redis.error.logstdout_logfile=/var/log/Redis.stdout.logenvironment=ASPNETCORE_ENVIRONMENT=Productionuser=rootstopsignal=INTautostart=trueautorestart=trueredirect_stderr=truestartsecs=3 3、其他 更新新的配置到supervisord： 1supervisorctl update 更新新的配置到supervisord 1supervisorctl update 重新启动配置中的所有程序 1supervisorctl reload 启动某个进程(program_name=你配置中写的程序名称) 1supervisorctl start program_name 查看正在守候的进程 1supervisorctl 停止某一进程 (program_name=你配置中写的程序名称) 1pervisorctl stop program_name 重启某一进程 (program_name=你配置中写的程序名称) 1supervisorctl restart program_name 停止全部进程 1supervisorctl stop all","tags":[]},{"title":"gradle学习","date":"2018-01-25T16:36:10.000Z","path":"2018/01/26/gradle学习/","text":"maven repository http://maven.aliyun.com/nexus/content/groups/public 12345repositories &#123; maven &#123; url &apos;http://maven.aliyun.com/nexus/content/groups/public&apos; &#125;&#125; spring mvc 配置 1234567891011dependencies &#123; //Version def springVersion = &quot;4.3.7.RELEASE&quot; def mybatisVersion = &quot;3.4.2&quot; // https://mvnrepository.com/artifact/org.springframework/spring-webmvc compile group: &apos;org.springframework&apos;, name: &apos;spring-webmvc&apos;, version: &apos;$springVersion&apos; // https://mvnrepository.com/artifact/org.mybatis/mybatis compile group: &apos;org.mybatis&apos;, name: &apos;mybatis&apos;, version: &apos;$mybatisVersion&apos; testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;&#125;","tags":[]}]